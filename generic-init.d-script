#! /bin/sh
### BEGIN INIT INFO
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO
# Author: Krishna Komarshetty <krishna@open2nix.com>
# Date: 7.23.2016

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
SRC=<path-to-application-jar>
# check for source path
if [ ! -d "$SRC" ]; then
        echo "$SRC path does not exist"
        exit 0
fi
cd $SRC
mkdir -p logs && touch $SRC/logs/sysout.log
STACKTRACE=logs/sysout.log
JAR=<jar-file-name>*.jar
CONFG=<path-to-application.conf> 
LOGBACK=<path-to-logback.xml> 	#optional 
HEAPSIZE="-Xms256m -Xmx512m" 	#make changes bases on your application memory requirement
NAME="generic-init.d-script" 	#name of init scipt
SERVICE_NAME="java -jar $HEAPSIZE -XX:-OmitStackTraceInFastThrow -Dconfig.file=$CONFG -Dlogback.configurationFile=$LOGBACK $JAR"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

###function for starting process###
start(){
	echo "$NAME starting ..."
	PID=`$SERVICE_NAME &> $STACKTRACE & echo $!` && echo $PID > $PIDFILE 
	# Check if successfully started
	if [ $? != 0 ]
	then
		echo "Error"
		exit 1
	else
		echo "$PID STARTED"
	fi
}
####function for stopping process###
stop(){
	PIDP=`ps -A -o pid,cmd|grep $JAR|grep -v grep|head -n 1|awk '{print $1}' 2> /dev/null`
	PID=$(cat $PIDFILE 2> /dev/null);
	if [[ $PIDP == "" && $PID == "" ]]; then
		return 1
	fi
	echo "$NAME stoping ..."
	kill -9 $PID 2> /dev/null
	if [ $? != 0 ]; then
		kill -9 $PIDP 2> /dev/null
		echo "$PIDP KILLED"
	else
		echo "$PID KILLED"
	fi
	rm $PIDFILE 2> /dev/null
}
###function for process status check####
status(){
	PID=$(cat $PIDFILE 2> /dev/null);
	if [ $? != 0 ]; then
		ps -aux | grep $JAR | grep -v grep 2> /dev/null
		if [ $? != 0 ]; then
			return 1		
		fi
	else
		ps -axf | grep $PID | grep -v grep 2> /dev/null
		if [ $? != 0 ]; then
			return 1
		else
			return 0
		fi
	fi
}

# switch cases to start stop restart and status service script
case $1 in
    start)
	status
	if [ $? != 0 ]; then 
        	start
	else
		echo "$NAME is already running ..."
	fi
   ;;
    stop)
	status
	if [ $? != 1 ]; then 
		stop
	else
		echo "$NAME is not running !!!" 
	fi
   ;;
    restart)
	stop
	start
    ;;
    status)
	status
	if [ $? == 0 ]; then 
		echo "$NAME is already running ..."
	else 
		echo "$NAME is not running !!!"
	fi 
    ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
        exit 3
        ;;
esac

:
